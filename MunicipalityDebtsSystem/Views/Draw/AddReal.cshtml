@using MunicipalityDebtsSystem.Core.Models.Draw
@model AddDrawViewModel;

@{
    ViewData["Title"] = "Реални усвоявания";
    ViewData["NewDraw"] = "Ново усвояване";
    var today = DateTime.Now.ToString("dd.MM.yyyy");
    
}

<div class="d-flex justify-content-between align-items-center mb-3 smart-title " style="margin-top: 20px;">
    <h2>@ViewData["Title"]</h2>
</div>
<hr />
<partial name="_DebtInfo" model="Model.DebtPartialInfo" />
<hr />
<div class="smart-title">
    <h4>@ViewData["NewDraw"]</h4>
</div>

<div class="row card-body">
    <div class="col-sm-12 offset-lg-2 col-lg-8 offset-xl-3 col-xl-6">
        <form id="realDraws" asp-action="AddReal" asp-controller="Draw" method="post" enctype="multipart/form-data">
            <input type="hidden" asp-for="@Model.DebtId" />
            <input type="hidden" asp-for="@Model.OperationTypeId" />
            
            <div class="row">
                <div class="col-sm-6 mb-2">
                    <label asp-for="@Model.PlannedDrawId" class="form-label-add-edit">Дата на планирано усвояване:</label>
                        <select asp-for="@Model.PlannedDrawId" class="form-control" aria-required="true" asp-items="@(new SelectList(Model.PlannedDrawDates, "Id", "PlannedDate"))">
                        <option value="0">-- Изберете</option>
                    </select>
                    <span asp-validation-for="@Model.PlannedDrawId" class="text-danger"></span>
                </div>

                <div class="col-sm-6 mb-2">
                    <label asp-for="@Model.DrawDate" class="form-label-add-edit">Дата на реално усвояване:</label>
                    <input asp-for="@Model.DrawDate" class="form-control" aria-required="true" value="@(string.IsNullOrEmpty(Model.DrawDate) ? today : Model.DrawDate)" /> 
                    <span asp-validation-for="@Model.DrawDate" class="text-danger"></span>
                </div>

                <div class="col-sm-6 mb-2">
                    <label asp-for="@Model.DrawAmount" class="form-label-add-edit">Размер на планирано усвояване в ориг. валута:</label>
                    <div class="input-group">
                        <input asp-for="DrawPlannedAmount" class="form-control" type="number" step="0.01" min="0" disabled="true"/> 
                    </div>
                    <span asp-validation-for="@Model.DrawPlannedAmount" class="text-danger"></span>
                </div>

                <div class="col-sm-6 mb-2">
                    <label asp-for="@Model.DrawAmount" class="form-label-add-edit">Размер на реално усвояване в ориг. валута:</label>
                    <div class="input-group">
                        <input asp-for="DrawAmount" class="form-control" type="number" step="0.01" min="0" /> 
                    </div>
                    <span asp-validation-for="@Model.DrawAmount" class="text-danger"></span>
                </div>

                <div class="mb-2">
                    <input class="btn btn-primary btn-dark-text w-100 py-2 fw-bold rounded" type="submit" value="Запис" />

                </div>
                <div class="mb-2">
                    <input class="btn btn-primary btn-dark-text w-100 py-2 fw-bold rounded" type="submit" value="Изчисти" />
                </div>
            </div>
        </form>
    </div>
</div>
<hr />
<div class="row">
    <div class="col-lg-12">
        <table id="drawTable" class="table table-hover table-striped"></table>
    </div>
</div>
<!-- DataTables JS and jQuery -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="~/lib/data-tables/datatables.min.js"></script>
<script>


    $(function () {
        var debtId = @Model.DebtId

            $('#drawTable').DataTable({
                dom: '<"row"<"col-sm-6 dataTables_buttons"B><"col-sm-6"f>>rtip',
                serverSide: false,
                ajax: {
                    "url": "@Url.Action("GetDrawsForDataTable", "Draw")",
                    "type": "GET",
                    "datatype": "json",
                    "data": function (d) {
                        d.id = debtId

                    }


                },

                language: {
                    url: "/lib/data-tables/dataTables.bgBG.json",
                    search: "", // Change the default placeholder
                    searchPlaceholder: "Търсене" // Custom placeholder text
                },
                columns: [


                    {
                        name: 'drawParentDate',
                        data: 'drawParentDate',
                        title: 'Дата на планирано усвояване',
                        sortable: true,
                        searchable: false
                    },
                    {
                        name: 'drawParentAmount',
                        data: 'drawParentAmount',
                        title: 'Размер на планирано плащане в оригинална валута',
                        sortable: true,
                        searchable: true
                    },
                    {
                        name: 'drawDate',
                        data: 'drawDate',
                        title: 'Дата на планирано усвояване',
                        sortable: true,
                        searchable: false
                    },
                    {
                        name: 'drawAmount',
                        data: 'drawAmount',
                        title: 'Размер на планирано плащане в оригинална валута',
                        sortable: true,
                        searchable: true
                    },
                    {
                        data: 'drawId', // This is where drawId comes from
                        title: 'Действия',
                        render: function (data, type, row) {
                            // return `
                            // <button class="btn btn-danger delete-btn" data-id="${data}">Изтрий</button>
                            // `;
                            return '<button type="button" class="btn btn-danger" onclick="deleteDraw(' + row.drawId + ');"><i class="fa fa-trash"></i> Изтрий</button>';
                        }
                    }

                    //          {
                    //     data: 'drawId',
                    //     title: 'Действия',
                    //     render: function (data, type, row) {
                    //         return `
                    //             <button class="btn btn-danger delete-btn" data-id="${data}">Изтрий</button>
                    //         `;
                    //     }
                    // }
                    // {
                    //     name: 'actions',
                    //     data: 'drawId',  //id
                    //     title: 'Действия',
                    //     sortable: false,
                    //     searchable: false,
                    //     className: "text-center",
                    //     render: function (data, type, row) {
                    //          return '<button class="btn btn-danger delete-btn" data-id="' + data.drawId + '" title="Изтрий"><i class="fa fa-trash"></i> Изтрий</button>';
                    //          //return '<button class="btn btn-danger delete-btn" data-id="' + row.drawId + '" title="Изтрий"><i class="fa fa-trash"></i> Изтрий</button>';
                    //     }
                    // }


                    // {
                    //      name: 'actions',
                    //      data: 'id',
                    //      title: '',
                    //      sortable: false,
                    //      searchable: false,
                    //      className: "text-right",
                    //      render: function (data, type, row, meta) {
                    //          return '<a href="Debt/Details/' + row.id + '" class="btn btn-primary" title="Преглед"><i class="fa fa-info-circle"></i></a>';
                    //      }
                    // },
                    // {
                    //      name: 'actions',
                    //      data: 'id',
                    //      title: '',
                    //      sortable: false,
                    //      searchable: false,
                    //      className: "text-right",
                    //      render: function (data, type, row, meta) {
                    //          return '<a href="Debt/Edit/' + row.id + '" class="btn btn-warning" title="Редакция"><i class="fa fa-info-circle"></i></a>';
                    //      }
                    // },

                ]
            });
    });
</script>
<script>

    function deleteDraw(drawId) {

        if (confirm('Сигурни ли сте, че искате да изтриете този запис?')) {
            $.ajax({
                url: '@Url.Action("DeleteDraw", "Draw")',  // Action to handle deletion
                type: 'POST',
                headers: { 'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() },
                data: { id: drawId },  // Pass the ID to delete
                success: function (result) {
                    if (result.success) {
                        alert('Записът беше успешно изтрит!');
                        $('#drawTable').DataTable().ajax.reload();  // Reload the table after deletion
                    } else {
                        alert(result.message);  // Show the message from the server
                    }
                },
                error: function () {
                    alert('Грешка при комуникация със сървъра!');
                }
            });
        }
    }

    $('#drawTable').on('click', '.delete-btn', function () {

        debugger;
        var drawId = $(this).data('drawId');  // Get the ID of the record to delete  - was id


        if (confirm('Сигурни ли сте, че искате да изтриете този запис?')) {
            $.ajax({
                url: '@Url.Action("DeletePlannedDraw", "Draw")',  // Action to handle deletion
                type: 'POST',
                data: { id: drawId },  // Pass the ID to delete
                success: function (result) {
                    if (result.success) {
                        alert('Записът беше успешно изтрит!');
                        $('#drawTable').DataTable().ajax.reload();  // Reload the table after deletion
                    } else {
                        alert(result.message);  // Show the message from the server
                    }
                },
                error: function () {
                    alert('Грешка при комуникация със сървъра!');
                }
            });
        }
    });
</script>

<style>
    .smart-title {
        font-family: 'Segoe UI', sans-serif;
        font-size: 2.5rem;
        font-weight: 600;
        color: #4A90E2; /* Soft Blue */
        background: linear-gradient(135deg, #4A90E2, #5C6BC0); /* Soft Blue Gradient */
        -webkit-background-clip: text;
        background-clip: text;
        text-shadow: 3px 3px 6px rgba(0, 0, 0, 0.15);
        letter-spacing: 1px;
        display: inline-block;
        padding-bottom: 5px;
        transition: all 0.3s ease-in-out;
    }

        .smart-title:hover {
            color: #fff;
            transform: scale(1.05);
        }

    .card-body {
        background-color: #f9f9f9;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
    }



</style>

<script>
 document.getElementById('PlannedDrawId').addEventListener('change', function() {
     var selectedValue = $('#PlannedDrawId').val();
        LoadData();
  });

  function LoadData() {

         var selectedValue = $('#PlannedDrawId').val();
       
        if (selectedValue == 0) {
            $('#DrawPlannedAmount').val('');
            $('#DrawAmount').val('');
            return;
        }

        $.ajax({
            url: '/Draw/GetPlannedDrawInfo',
            type: 'GET',
            data: { plannedDrawId: selectedValue },
            success: function(response) {
               
                var plannedDrawAmount = response.drawAmount;
                $('#DrawPlannedAmount').val(plannedDrawAmount);
                $('#DrawAmount').val(plannedDrawAmount);
            },
            error: function(xhr, status, error) {
                console.log("Error fetching data:", error);
            }
        });
}
</script>
